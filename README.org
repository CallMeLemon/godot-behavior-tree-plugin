* behv: A Behavior Tree implementation for the Godot Engine, in GDScript
`behv_godot` is a Godot Engine addon that adds a collection of nodes to the editor that facilitate the implementation of Behavior Trees. It is released under the terms of the MIT License.

** Design philosophy
- Easy to use and reason about - just Behavior Trees!
- Unobtrusive -  to an existing workflow; the BT primitives are implemented as Nodes that get added directly onto a scene; Actions are just normal nodes that you extend with a script
- Add add little as possible to Godot -
  - The system uses existing numeric constants (`OK`, `FAILED` and `ERR_BUSY`) as stand-ins for the existing "Success, Failure, Running" concepts in BT.
  - The entire thing is implemented as a pure-GDScript addon that can be easily added to a project without having to rebuild the Godot editor
  
** Installation
- Clone this repository into the `res://addons` folder of your project

** Node types
- `BehvRoot` Place this at the root of your tree at the AI/agent level. Accepts only a single child (probably some kind of composite)
- Composite Types:
  - `BehvSequence` - Runs a collection of child nodes, stopping at the first failure or `ERR_BUSY`
    - Will return and complete if any child returns `FAILED`, returning `FAILED`
    - Will return `OK` if all children return `OK`
    - Will return if any child returns `ERR_BUSY`. Will resume at the `ERR_BUSY`-returning child
  - `BehvSelector` - Runs a collection of child nodes, stopping at the first success or `ERR_BUSY`
    - Will return and complete if any child returns `OK`, returning `OK`
    - Will return `FAILED` if all children return `FAILED`
    - Will return if any child returns `ERR_BUSY`. Will resume at the `ERR_BUSY`-returning child
- Decorator Types:
  - Inverter
  - Succeeder
- Leaf Types
  - Action
  - Condition
